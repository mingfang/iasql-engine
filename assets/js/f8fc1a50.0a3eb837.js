"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1233],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)a=i[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=n,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?o.createElement(h,r(r({ref:t},u),{},{components:a})):o.createElement(h,r({ref:t},u))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,r[1]=l;for(var p=2;p<i;p++)r[p]=a[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5449:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=a(7462),n=(a(7294),a(3905));const i={slug:"ecs-simplified",title:"Deploying to ECS, Simplified!",date:new Date("2022-11-04T00:00:00.000Z"),unlisted:!0,authors:["mtp1376"]},r=void 0,l={permalink:"/blog/ecs-simplified",source:"@site/blog/ecs-simplified.mdx",title:"Deploying to ECS, Simplified!",description:"If you have ever tried to deploy your containerized application to ECS, you know that it's not going to be an easy click-to-deploy journey. In order to get your application up and running on ECS, you have to go through a bunch of resource creation. You'll need to:",date:"2022-11-04T00:00:00.000Z",formattedDate:"November 4, 2022",tags:[],readingTime:7.47,hasTruncateMarker:!1,authors:[{name:"Mohammad Teimori Pabandi",imageURL:"https://github.com/mtp1376.png",key:"mtp1376"}],frontMatter:{slug:"ecs-simplified",title:"Deploying to ECS, Simplified!",date:"2022-11-04T00:00:00.000Z",unlisted:!0,authors:["mtp1376"]},prevItem:{title:"Deploy Ghost in EC2 with one click",permalink:"/blog/deploy-ghost-ec2"},nextItem:{title:"UPDATE iasql SET source = 'open';",permalink:"/blog/os-iasql"}},s={authorsImageUrls:[void 0]},p=[{value:"<strong> An Example Usage of the <code>aws_ecs_simplified</code> Module </strong>",id:"-an-example-usage-of-the-aws_ecs_simplified-module-",level:2},{value:"Low-level Access to Resources",id:"low-level-access-to-resources",level:2}],u={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"If you have ever tried to deploy your containerized application to ECS, you know that it's not going to be an easy click-to-deploy journey. In order to get your application up and running on ECS, you have to go through a bunch of resource creation. You'll need to:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Deploy a load balancer as the point-of-contact for your app"),(0,n.kt)("li",{parentName:"ul"},"Create a target group for the load balancer and register the ECS tasks in it"),(0,n.kt)("li",{parentName:"ul"},"Add a new listener to your load balancer and connect it to the target group"),(0,n.kt)("li",{parentName:"ul"},"Create a security group, and you need to allow the port your app is listening on in that security group"),(0,n.kt)("li",{parentName:"ul"},"Attach the security group above to your load balancer"),(0,n.kt)("li",{parentName:"ul"},"Create a CloudWatch log group for your ECS task"),(0,n.kt)("li",{parentName:"ul"},"Create an ECS cluster, and definitely the task definition as well"),(0,n.kt)("li",{parentName:"ul"},"Oh, and create an ECR repository to push your images to be run on the container")),(0,n.kt)("p",null,"I'm not going to continue this long list, since I've already got a headache. Doing those steps manually is going to give you a headache as well, so why bother doing all those steps yourself and risking different errors you might face when deploying your containerized app? You don't really have the time for the random IAM-related errors AWS is demanding you to resolve. Besides, you already have your codebase ready and the ",(0,n.kt)("inlineCode",{parentName:"p"},"Dockerfile")," is there, so why not just run a simple command doing something that should be simply done?"),(0,n.kt)("p",null,"In this post, we're going to discover an IaSQL module that's built to make deploying to ECS, simplified. Most of the details for deploying a container to ECS are the same (load balancers, security groups, IAM roles, etc), and we have created the ",(0,n.kt)("inlineCode",{parentName:"p"},"aws_ecs_simplified")," module for you so that you can give it any Github repo with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and get your app deployed to ECS in the fastest time possible, with scalability available! All the needed resources are going to be created automatically in your AWS account, and you'll have the full access to the details while you're gaining the benefit of a higher-level simple deployment."),(0,n.kt)("h2",{id:"-an-example-usage-of-the-aws_ecs_simplified-module-"},(0,n.kt)("strong",{parentName:"h2"}," An Example Usage of the ",(0,n.kt)("inlineCode",{parentName:"strong"},"aws_ecs_simplified")," Module ")),(0,n.kt)("p",null,"Let's say we are going to deploy ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/iasql/iasql-engine/tree/main/examples/ecs-fargate/prisma/app"},"this simple Express.js app")," to the ECS. It has a ",(0,n.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"package.json")," that installs ",(0,n.kt)("inlineCode",{parentName:"p"},"express")," on ",(0,n.kt)("inlineCode",{parentName:"p"},"npm install"),". ",(0,n.kt)("inlineCode",{parentName:"p"},"npm start")," then starts the Express server which listens on port ",(0,n.kt)("inlineCode",{parentName:"p"},"8088"),"."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"aws_ecs_simplified")," is a high-level module we have created to make scalable ECS deployments easier. For more info on high-level vs low-level modules, you can check ",(0,n.kt)("a",{parentName:"p",href:"https://iasql.com/docs/low-level-vs-high-level/"},"this guide"),".")),(0,n.kt)("p",null,"Let's go and deploy the above app to your AWS account. Don't worry if you don't have an IaSQL database already, you can create one for free when you click the \"Deploy Now\" button."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Deploy a simple Express.js app from a Github repository to ECS" showLineNumbers TheButton="Deploy Now"',title:'"Deploy',a:!0,simple:!0,"Express.js":!0,app:!0,from:!0,Github:!0,repository:!0,to:!0,'ECS"':!0,showLineNumbers:!0,TheButton:'"Deploy','Now"':!0},"SELECT iasql_install('aws_ecs_simplified', 'aws_codebuild');\nINSERT INTO ecs_simplified(app_name, app_port, image_tag, public_ip) VALUES(\n  'simple-express',\n  8088,\n  'latest',\n  true\n);\nSELECT iasql_apply();\n\nSELECT ecr_build(\n  'https://github.com/iasql/iasql-engine/', -- the Github repo URL\n  (SELECT id\n    FROM repository\n    WHERE repository_name = 'simple-express-repository')::varchar(255), -- ECR repo for the image to be pushed\n  './examples/ecs-fargate/prisma/app', -- the subdirectory in Github repo\n  'main', -- the Github branch or ref\n  NULL -- Github personal access token - can be omitted if public repository\n);\n")),(0,n.kt)("p",null,(0,n.kt)("button",{className:"button button--primary button--lg margin-bottom--lg",onClick:()=>window.open("https://app.iasql.com/#/button/SELECT%20iasql_install%28%27aws_ecs_simplified%27%2C%20%27aws_codebuild%27%29%3B%0AINSERT%20INTO%20ecs_simplified%28app_name%2C%20app_port%2C%20image_tag%2C%20public_ip%29%20VALUES%28%0A%20%20%27simple-express%27%2C%0A%20%208088%2C%0A%20%20%27latest%27%2C%0A%20%20true%0A%29%3B%0ASELECT%20iasql_apply%28%29%3B%0A%0ASELECT%20ecr_build%28%0A%20%20%27https%3A%2F%2Fgithub.com%2Fiasql%2Fiasql-engine%2F%27%2C%20--%20the%20Github%20repo%20URL%0A%20%20%28SELECT%20id%0A%20%20%20%20FROM%20repository%0A%20%20%20%20WHERE%20repository_name%20%3D%20%27simple-express-repository%27%29%3A%3Avarchar%28255%29%2C%20--%20ECR%20repo%20for%20the%20image%20to%20be%20pushed%0A%20%20%27.%2Fexamples%2Fecs-fargate%2Fprisma%2Fapp%27%2C%20--%20the%20subdirectory%20in%20Github%20repo%0A%20%20%27main%27%2C%20--%20the%20Github%20branch%20or%20ref%0A%20%20NULL%20--%20Github%20personal%20access%20token%20-%20can%20be%20omitted%20if%20public%20repository%0A%29%3B","_blank")},"Deploy Now")),(0,n.kt)("p",null,"That's it! Now wait for some time and your app is deployed! While your app is being deployed, let's go through the commands we executed in more depth:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT iasql_install('aws_ecs_simplified', 'aws_codebuild');\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This command installs the ",(0,n.kt)("inlineCode",{parentName:"li"},"aws_ecs_simplified")," high-level module. We\u2013 at IaSQL\u2013 have created that module to make it easy to deploy containerized apps to ECS. The code for it is ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/iasql/iasql-engine/blob/v0.0.22/src/modules/0.0.23/aws_ecs_simplified/sql/after_install.sql"},"here"),". But IaSQL is so flexible that anyone can create their own high-level (and of course, low-level) modules and add it to IaSQL.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO ecs_simplified(app_name, app_port, image_tag, public_ip) VALUES(\n  'simple-express',\n  8088,\n  'latest',\n  true\n);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This command creates a new ",(0,n.kt)("inlineCode",{parentName:"li"},"ecs_simplified")," app by inserting a new row into the ",(0,n.kt)("inlineCode",{parentName:"li"},"ecs_simplified")," table. Seems pretty easy, right? But under the hood, it's creating all the necessary resources like load balancers, security groups, IAM roles, etc."),(0,n.kt)("li",{parentName:"ul"},"You can manually check the tables to see what resources are being created. For example, looking at the ",(0,n.kt)("inlineCode",{parentName:"li"},"load_balancer")," table you'll see a load balancer named ",(0,n.kt)("inlineCode",{parentName:"li"},"simple-express-load-balancer")," is inserted automatically by running the above insert command.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT iasql_apply();\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The insert command did create the list for what resources should be created, but they've not yet created on the AWS. You need to call the ",(0,n.kt)("inlineCode",{parentName:"li"},"iasql_apply()")," function to sync the cloud with the data on your database."),(0,n.kt)("li",{parentName:"ul"},"For more info on the ",(0,n.kt)("inlineCode",{parentName:"li"},"iasql_apply()")," command, check ",(0,n.kt)("a",{parentName:"li",href:"https://iasql.com/docs/apply-and-sync/#apply-and-preview_apply"},"this guide")," on how it works."),(0,n.kt)("li",{parentName:"ul"},"After running the ",(0,n.kt)("inlineCode",{parentName:"li"},"iasql_apply()")," function to completion all the necessary resources are now created on the cloud, so their ARNs are populated. You can verify this by looking at different tables, eg. ",(0,n.kt)("inlineCode",{parentName:"li"},"iam_role"),"."),(0,n.kt)("li",{parentName:"ul"},"To get your load balancer address, you can easily run ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT load_balancer_dns FROM ecs_simplified WHERE app_name = 'simple-express'")," query and get the URL to access your app."),(0,n.kt)("li",{parentName:"ul"},"Now ECS is waiting for an image to be pushed to your ECR repository to run it. You can get the URI for the ECR repository by running the ",(0,n.kt)("inlineCode",{parentName:"li"},"SELECT repository_uri FROM ecs_simplified WHERE app_name = 'simple-express'")," query.  You ",(0,n.kt)("em",{parentName:"li"},"could")," build your docker image locally and then follow ",(0,n.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html"},"Steps 2 and 4 from this guide")," to connect your local docker CLI to your ECR repository and push that docker image into your ECR repository, but we have a simpler solution next."),(0,n.kt)("li",{parentName:"ul"},"In the next step, we'll automatically build an image for the code in Github repo and then push it to this URI (all through SQL and using another high-level function named ",(0,n.kt)("inlineCode",{parentName:"li"},"ecr_build"),").")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ecr_build(\n  'https://github.com/iasql/iasql-engine/', -- the Github repo URL\n  (SELECT id\n    FROM repository\n    WHERE repository_name = 'simple-express-repository')::varchar(255), -- ECR repo for the image to be pushed\n  './examples/ecs-fargate/prisma/app', -- the subdirectory in Github repo\n  'main',  -- the Github branch or ref\n  NULL -- Github personal access token - can be omitted if public repository\n);\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This command tells IaSQL to go clone ",(0,n.kt)("inlineCode",{parentName:"li"},"iasql-engine")," repository, build an image on the subdirectory specified, and then push it to the ECR repository created earlier by the ",(0,n.kt)("inlineCode",{parentName:"li"},"aws_ecs_simplified")," module. Running the above command will automatically create a CodeBuild project and the related roles, etc. Then it'll start a build, and after it's successful all the created resources are deleted to ensure there won't be any additional charges to your AWS account."),(0,n.kt)("li",{parentName:"ul"},"To access your app on the cloud, get the load balancer address and use your browser to access the live version of it:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT load_balancer_dns\nFROM ecs_simplified\nWHERE app_name = 'simple-express';\n")),(0,n.kt)("p",null,"Then you can check if the server is running on the ",(0,n.kt)("inlineCode",{parentName:"p"},"<load_balancer_dns value>:8088/health")," address."),(0,n.kt)("h2",{id:"low-level-access-to-resources"},"Low-level Access to Resources"),(0,n.kt)("p",null,"So the ",(0,n.kt)("inlineCode",{parentName:"p"},"aws_ecs_simplified")," module simplifies things, right? But what if you still need the level of control you had when you were doing all the steps manually? The traditional PaaS trade-off is that you can't grow your app beyond the built-in limitations as you don't have access to all the small details. The IaSQL approach is not limited in that way."),(0,n.kt)("p",null,"Let's say you want your ECS container to be able to use the AWS CLI to provision an EC2 instance, and for that purpose its IAM role needs ",(0,n.kt)("inlineCode",{parentName:"p"},"AmazonEC2FullAccess")," policy to work properly. ",(0,n.kt)("inlineCode",{parentName:"p"},"aws_ecs_simplified")," does not have a column to configure such a thing, but that doesn't mean we're stuck."),(0,n.kt)("p",null,"The good news is that you still have the full control over all resources in the deepest details. Let's fix your app's IAM role access by attaching the needed policy to its IAM role:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE iam_role\nSET attached_policies_arns = attached_policies_arns ||\n                             'arn:aws:iam::aws:policy/AmazonEC2FullAccess' -- attached_policies_arns is of text[] type\nWHERE role_name = 'simple-express-ecs-task-exec-role';\n\n")),(0,n.kt)("p",null,"You want additional rules for the container's security group? No problem! Just write the SQL and execute it, and it will be applied to the cloud within seconds. You want 3 copies of your container to be kept running with a round-robin load balancing on them? It's already there, just do an ",(0,n.kt)("inlineCode",{parentName:"p"},"UPDATE ecs_simplified SET desired_count = 3 WHERE app_name = 'simple_express';")," and it's there for you."),(0,n.kt)("p",null,"With IaSQL and its flexibility, you can benefit from both the high-level and low-level operations. We have created the ",(0,n.kt)("inlineCode",{parentName:"p"},"aws_ecs_simplified")," module to show the flexibility and power of IaSQL engine, but the possibilities are endless. IaSQL is also an open-source project, meaning that you can use the powerful IaSQL engine and build your own modules on top of that. If you're into the idea of empowering other developers to do complex infrastructure tasks simply, why don't you take a look at our ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/iasql/iasql-engine/blob/main/CONTRIBUTING.md"},"contributing guide")," and join our ",(0,n.kt)("a",{parentName:"p",href:"https://discord.com/invite/machGGczea"},"Discord channel"),"? We'll thoroughly answer any of your question regarding the usage or development of IaSQL. Looking forward to seeing you in our small, but great community."))}c.isMDXComponent=!0}}]);